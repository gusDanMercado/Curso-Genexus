spec_i([ mnproc,2,'Pais_Data Provider','Pais_DataProvider',0,eng,'18_0_10-184260' ]).
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
rule_i(0,datastore(1,'DS_LAST_CHANGE','')).
rule_i(0,datastore(1,'LOCK_RETRY','10')).
rule_i(0,datastore(1,'WAIT_RECORD','0')).
rule_i(0,datastore(1,'ISOLATION_LEVEL','CR')).
rule_i(0,datastore(1,'SQLSERVER_VERSION','10')).
rule_i(0,datastore(1,'COMMENT_ON','No')).
rule_i(0,datastore(1,'DFT_TMP_TBLSPACE','')).
rule_i(0,datastore(1,'DFT_IDX_TBLSPACE','')).
rule_i(0,datastore(1,'DFT_TBL_TBLSPACE','')).
rule_i(0,datastore(1,'DCL_REF_INT_DB','Yes')).
rule_i(0,datastore(1,'PRIMARY_KEY_TYPE','PK')).
rule_i(0,datastore(1,'CS_SCHEMA','')).
rule_i(0,datastore(1,'SORT_ATTRIBUTES','Yes')).
rule_i(0,datastore(1,'JRN400','QSQJRN')).
rule_i(0,datastore(1,'CREATE_SAVF','Yes')).
rule_i(0,datastore(1,'PGMLIB','')).
rule_i(0,datastore(1,'DTALIB','')).
rule_i(0,datastore(1,'RecycleRWMin','30')).
rule_i(0,datastore(1,'RecycleRWType','1')).
rule_i(0,datastore(1,'RecycleRW','-1')).
rule_i(0,datastore(1,'POOL_STARTUP','No')).
rule_i(0,datastore(1,'POOLSIZE_RW','10')).
rule_i(0,datastore(1,'UnlimitedRWPool','-1')).
rule_i(0,datastore(1,'PoolRWEnabled','-1')).
rule_i(0,datastore(1,'CS_RPCPGML','')).
rule_i(0,datastore(1,'DS_READ_REPLICA','No')).
rule_i(0,datastore(1,'JDBC_DATASOURCE','')).
rule_i(0,datastore(1,'USE_JDBC_DATASOURCE','0')).
rule_i(0,datastore(1,'DS_DBMS_ADDINFO','')).
rule_i(0,datastore(1,'USER_PASSWORD','')).
rule_i(0,datastore(1,'USER_ID','')).
rule_i(0,datastore(1,'TRUSTED_CONNECTION','Yes')).
rule_i(0,datastore(1,'CS_CONNECT','First')).
rule_i(0,datastore(1,'DBMS_PORT','')).
rule_i(0,datastore(1,'CS_SERVER','GUSTAVOMERCADO\SQLEXPRESS01')).
rule_i(0,datastore(1,'CS_DBNAME',db_miTienda)).
rule_i(0,datastore(1,'CS_FLEDSNAME','')).
rule_i(0,datastore(1,'CS_DRVNAME','sql server')).
rule_i(0,datastore(1,'CS_DSNAME','')).
rule_i(0,datastore(1,'DB_URL','')).
rule_i(0,datastore(1,'JDBC_CUSTOM_URL','0')).
rule_i(0,datastore(1,'JDBC_CUSTOM_DRIVER','')).
rule_i(0,datastore(1,'JDBC_DRIVER','com.microsoft.sqlserver.jdbc.SQLServerDriver')).
rule_i(0,datastore(1,'CONNECT_METHOD','OPSYS')).
rule_i(0,datastore(1,'ACCESS_TECHNO','ADONET')).
rule_i(0,datastore(1,'MAIN_DS','-1')).
rule_i(0,datastore(1,'REORG_GEN','8')).
rule_i(0,datastore(1,'HelpKeyword','20')).
rule_i(0,datastore(1,'DBMS',12)).
rule_i(0,datastore(1,'NAME','Default')).
rule_i(0,prop(idNULLS_BEHAVIOR,idNB_Current)).
rule_i(0,prop(gxtest_ignoreForTestCoverage,'-1')).
rule_i(0,prop('ObjectVisibility','KnowledgeBase')).
rule_i(0,prop('FullyQualifiedName','Pais_DataProvider')).
rule_i(0,prop('GenerateObject','-1')).
rule_i(0,prop('SPC_WARNINGS_DISABLED','spc0096 spc0107 spc0142')).
rule_i(0,prop(idConnectivitySupport,idInherit)).
rule_i(0,prop('OutputCollectionName','PaisCollection')).
rule_i(0,prop('OutputCollection','-1')).
rule_i(0,prop('OutputSDT',o(0,'Pais'))).
rule_i(0,prop(idINFER_SDT,idINFER_STRUCTURE_NO)).
rule_i(0,prop('OBJECT_METADATA','')).
rule_i(0,prop('CALL_PROTOCOL','INTERNAL')).
rule_i(0,prop('IsMain','-1')).
rule_i(0,prop('Theme',o(102,miTienda))).
rule_i(0,prop(idISWEBSERVICE,'0')).
rule_i(0,prop('ObjDesc','Pais_Data Provider')).
rule_i(0,prop('ObjName','Pais_DataProvider')).
rule_i(0,rule([ a(22,[ 'Rfr','"Refresh"','5' ]) ],[],[],[])).
rule_i(0,maingen(41)).
rule_i(0,prop('PGMTYPE',main)).
rule_i(0,parm([ 'Gxm2rootcol' ],[])).
rule_i(0,parmio([ [ 'Gxm2rootcol',out ] ])).
 
 
 
 
 
 
 
 
attri_i('Gxm1pais',[ 'Gxm1pais',o('Pais'),0,0,'',0,'Gxm1pais','',6 ]).
attri_i('Gxm2rootcol',[ 'Gxm2rootcol',o(objectcollection('Pais')),0,0,'',0,'Gxm2rootcol','',5 ]).
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
break_i(1,rpt,0,[],[ [],[],[] ]).
 
b_group_i(1,1,lit,0,1,0).
 
b_line_i(16,1,1,cmd,16,[ t('',107,15,15),t('Gxm1pais',23,16,0),t(=,10,16,0),t([ 'Pais',[ t('(',0,16,0),t(')',4,16,0) ],n ],46,16,0) ]).
b_line_i([ 16,1 ],1,1,cmd,16,[ t('',107,15,15),t([ t('Gxm2rootcol',23,16,0),t('add(',1,16,0) ],31,16,0),t('Gxm1pais',23,16,0),t(')',4,16,0) ]).
b_line_i(18,1,1,cmd,18,[ t('',107,17,0),t([ t('Gxm1pais',23,18,0),t('Paisnombre',3,18,0) ],29,18,0),t(=,10,18,0),t('"Uruguay"',3,18,0) ]).
b_line_i(21,1,1,cmd,18,[ t('',107,21,0),t('Gxm1pais',23,18,0),t(=,10,18,0),t([ 'Pais',[ t('(',0,21,0),t(')',4,21,0) ],n ],46,18,0) ]).
b_line_i([ 21,1 ],1,1,cmd,18,[ t('',107,21,0),t([ t('Gxm2rootcol',23,21,0),t('add(',1,21,0) ],31,21,0),t('Gxm1pais',23,18,0),t(')',4,18,0) ]).
b_line_i(23,1,1,cmd,20,[ t('',107,23,0),t([ t('Gxm1pais',23,20,0),t('Paisnombre',3,20,0) ],29,20,0),t(=,10,20,0),t('"Brasil"',3,20,0) ]).
b_line_i(27,1,1,cmd,20,[ t('',107,27,0),t('Gxm1pais',23,20,0),t(=,10,20,0),t([ 'Pais',[ t('(',0,27,0),t(')',4,27,0) ],n ],46,20,0) ]).
b_line_i([ 27,1 ],1,1,cmd,20,[ t('',107,27,0),t([ t('Gxm2rootcol',23,27,0),t('add(',1,27,0) ],31,27,0),t('Gxm1pais',23,20,0),t(')',4,20,0) ]).
b_line_i(29,1,1,cmd,22,[ t('',107,29,0),t([ t('Gxm1pais',23,22,0),t('Paisnombre',3,22,0) ],29,22,0),t(=,10,22,0),t('"México"',3,22,0) ]).
b_line_i(33,1,1,cmd,22,[ t('',107,33,0),t('Gxm1pais',23,22,0),t(=,10,22,0),t([ 'Pais',[ t('(',0,33,0),t(')',4,33,0) ],n ],46,22,0) ]).
b_line_i([ 33,1 ],1,1,cmd,22,[ t('',107,33,0),t([ t('Gxm2rootcol',23,33,0),t('add(',1,33,0) ],31,33,0),t('Gxm1pais',23,22,0),t(')',4,22,0) ]).
b_line_i(35,1,1,cmd,24,[ t('',107,35,0),t([ t('Gxm1pais',23,24,0),t('Paisnombre',3,24,0) ],29,24,0),t(=,10,24,0),t('"China"',3,24,0) ]).
b_line_i(39,1,1,cmd,24,[ t('',107,39,0),t('Gxm1pais',23,24,0),t(=,10,24,0),t([ 'Pais',[ t('(',0,39,0),t(')',4,39,0) ],n ],46,24,0) ]).
b_line_i([ 39,1 ],1,1,cmd,24,[ t('',107,39,0),t([ t('Gxm2rootcol',23,39,0),t('add(',1,39,0) ],31,39,0),t('Gxm1pais',23,24,0),t(')',4,24,0) ]).
b_line_i(41,1,1,cmd,26,[ t('',107,41,0),t([ t('Gxm1pais',23,26,0),t('Paisnombre',3,26,0) ],29,26,0),t(=,10,26,0),t('"Estado Unidos"',3,26,0) ]).
 
 
 
 
 
 
page_layout_i([ 66,0,6 ]).
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
calling_main_i(33,2).
 
 
 
 
 
 
 
 
 
struct_dt_i([ 0,1,0 ],name,'Pais').
struct_dt_i([ 0,1,0 ],namespace,miTienda).
struct_dt_i([ 0,1,0 ],significantName,'Pais').
struct_dt_i([ 0,1,0 ],'ObjName','Pais').
struct_dt_i([ 0,1,0 ],'ObjDesc','Pais').
struct_dt_i([ 0,1,0 ],'ExternalName','Pais').
struct_dt_i([ 0,1,0 ],'ExternalNamespace',miTienda).
struct_dt_i([ 0,1,0 ],key,[ 1 ]).
struct_dt_i([ 0,1,0 ],lvl,1).
struct_dt_i([ 26,1,0 ],name,'GeneXus\Common\Messages').
struct_dt_i([ 26,1,0 ],namespace,'GeneXus').
struct_dt_i([ 26,1,0 ],'ObjName','Messages').
struct_dt_i([ 26,1,0 ],'ObjDesc','Messages').
struct_dt_i([ 26,1,0 ],'ExternalName','Messages').
struct_dt_i([ 26,1,0 ],'ExternalNamespace','GeneXus').
struct_dt_i([ 26,1,0 ],'JsonInputFormat','JsonInputWrapped').
struct_dt_i([ 26,1,0 ],collection,'True').
struct_dt_i([ 26,1,0 ],datatype,[ 26,1,1 ]).
struct_dt_i([ 26,1,0 ],'CollectionItemName','Message').
struct_dt_i([ 26,1,0 ],'XmlName','').
struct_dt_i([ 26,1,0 ],'XmlCollectionItemName','').
struct_dt_i([ 26,1,0 ],'XmlNamespace','').
struct_dt_i([ 26,1,0 ],'CollectionSerialization',idXmlCollectionWrapped).
struct_dt_i([ 26,1,0 ],'XmlInclude',idXmlIncludeAlways).
struct_dt_i([ 26,1,0 ],'JsonName','').
struct_dt_i([ 26,1,0 ],'JsonInclude',idJsonNoProperty).
struct_dt_i([ 26,1,0 ],'JsonCollectionSerialization',idXmlCollectionWrapped).
struct_dt_i([ 26,1,0 ],isexternal,'True').
struct_dt_i([ 26,1,1 ],name,'Message').
struct_dt_i([ 26,1,1 ],namespace,'GeneXus.Messages').
struct_dt_i([ 0,1,0 ],fullname,'Pais').
struct_dt_i([ 26,1,0 ],fullname,'GeneXus\Common\Messages').
struct_dt_i([ 26,1,1 ],fullname,'GeneXus\Common\Messages.Message').
struct_dt_i([ 0,1,0 ],camelname,'Pais').
struct_dt_i([ 26,1,0 ],camelname,'Genexus\common\messages').
struct_dt_i([ 26,1,1 ],camelname,'Message').
 
struct_dt_elem_i([ 0,1,0 ],1,name,'Paisid').
struct_dt_elem_i([ 0,1,0 ],1,camelname,'PaisID').
struct_dt_elem_i([ 0,1,0 ],1,basedon,96).
struct_dt_elem_i([ 0,1,0 ],1,length,6).
struct_dt_elem_i([ 0,1,0 ],1,decimals,0).
struct_dt_elem_i([ 0,1,0 ],1,sign,0).
struct_dt_elem_i([ 0,1,0 ],1,type,[ 4,6,0 ]).
struct_dt_elem_i([ 0,1,0 ],1,pic,'ZZZZZ9').
struct_dt_elem_i([ 0,1,0 ],1,collection,'False').
struct_dt_elem_i([ 0,1,0 ],1,attributeid,'1').
struct_dt_elem_i([ 0,1,0 ],1,'ExternalName','PaisID').
struct_dt_elem_i([ 0,1,0 ],1,'ExternalNamespace',miTienda).
struct_dt_elem_i([ 0,1,0 ],1,'ATT_INITIAL_VALUE',[ t('1',3) ]).
struct_dt_elem_i([ 0,1,0 ],2,name,'Paisnombre').
struct_dt_elem_i([ 0,1,0 ],2,camelname,'PaisNombre').
struct_dt_elem_i([ 0,1,0 ],2,basedon,97).
struct_dt_elem_i([ 0,1,0 ],2,length,80).
struct_dt_elem_i([ 0,1,0 ],2,decimals,0).
struct_dt_elem_i([ 0,1,0 ],2,type,[ 13,80,0 ]).
struct_dt_elem_i([ 0,1,0 ],2,pic,'').
struct_dt_elem_i([ 0,1,0 ],2,collection,'False').
struct_dt_elem_i([ 0,1,0 ],2,attributeid,'2').
struct_dt_elem_i([ 0,1,0 ],2,'ExternalName','PaisNombre').
struct_dt_elem_i([ 0,1,0 ],2,'ExternalNamespace',miTienda).
struct_dt_elem_i([ 0,1,0 ],3,name,'Paisbandera').
struct_dt_elem_i([ 0,1,0 ],3,camelname,'PaisBandera').
struct_dt_elem_i([ 0,1,0 ],3,basedon,98).
struct_dt_elem_i([ 0,1,0 ],3,length,4).
struct_dt_elem_i([ 0,1,0 ],3,decimals,0).
struct_dt_elem_i([ 0,1,0 ],3,type,[ 7,4,0 ]).
struct_dt_elem_i([ 0,1,0 ],3,pic,'').
struct_dt_elem_i([ 0,1,0 ],3,collection,'False').
struct_dt_elem_i([ 0,1,0 ],3,attributeid,'3').
struct_dt_elem_i([ 0,1,0 ],3,'ExternalName','PaisBandera').
struct_dt_elem_i([ 0,1,0 ],3,'ExternalNamespace',miTienda).
struct_dt_elem_i([ 0,1,0 ],4,name,'Paisbandera_gxi').
struct_dt_elem_i([ 0,1,0 ],4,camelname,'PaisBandera_GXI').
struct_dt_elem_i([ 0,1,0 ],4,collection,'False').
struct_dt_elem_i([ 0,1,0 ],4,isadd,'True').
struct_dt_elem_i([ 0,1,0 ],4,length,2048).
struct_dt_elem_i([ 0,1,0 ],4,decimals,0).
struct_dt_elem_i([ 0,1,0 ],4,type,[ 13,2048,0 ]).
struct_dt_elem_i([ 26,1,1 ],1,name,'Id').
struct_dt_elem_i([ 26,1,1 ],1,camelname,'Id').
struct_dt_elem_i([ 26,1,1 ],1,length,128).
struct_dt_elem_i([ 26,1,1 ],1,decimals,0).
struct_dt_elem_i([ 26,1,1 ],1,type,[ 13,128,0 ]).
struct_dt_elem_i([ 26,1,1 ],1,pic,'').
struct_dt_elem_i([ 26,1,1 ],1,collection,'False').
struct_dt_elem_i([ 26,1,1 ],1,'ExternalName','Id').
struct_dt_elem_i([ 26,1,1 ],1,'ExternalNamespace',miTienda).
struct_dt_elem_i([ 26,1,1 ],1,'XmlType','Element').
struct_dt_elem_i([ 26,1,1 ],1,'XmlName','').
struct_dt_elem_i([ 26,1,1 ],1,'XmlNamespace','').
struct_dt_elem_i([ 26,1,1 ],1,soaptype,'').
struct_dt_elem_i([ 26,1,1 ],1,'XmlInclude',idXmlIncludeAlways).
struct_dt_elem_i([ 26,1,1 ],1,'JsonName','').
struct_dt_elem_i([ 26,1,1 ],1,'JsonInclude',idJsonEmpty).
struct_dt_elem_i([ 26,1,1 ],2,name,'Type').
struct_dt_elem_i([ 26,1,1 ],2,camelname,'Type').
struct_dt_elem_i([ 26,1,1 ],2,basedon,7).
struct_dt_elem_i([ 26,1,1 ],2,length,2).
struct_dt_elem_i([ 26,1,1 ],2,decimals,0).
struct_dt_elem_i([ 26,1,1 ],2,sign,0).
struct_dt_elem_i([ 26,1,1 ],2,type,[ 4,2,0 ]).
struct_dt_elem_i([ 26,1,1 ],2,pic,'Z9').
struct_dt_elem_i([ 26,1,1 ],2,collection,'False').
struct_dt_elem_i([ 26,1,1 ],2,'ExternalName','Type').
struct_dt_elem_i([ 26,1,1 ],2,'ExternalNamespace',miTienda).
struct_dt_elem_i([ 26,1,1 ],2,'XmlType','Element').
struct_dt_elem_i([ 26,1,1 ],2,'XmlName','').
struct_dt_elem_i([ 26,1,1 ],2,'XmlNamespace','').
struct_dt_elem_i([ 26,1,1 ],2,soaptype,'').
struct_dt_elem_i([ 26,1,1 ],2,'XmlInclude',idXmlIncludeAlways).
struct_dt_elem_i([ 26,1,1 ],2,'JsonName','').
struct_dt_elem_i([ 26,1,1 ],2,'JsonInclude',idJsonEmpty).
struct_dt_elem_i([ 26,1,1 ],3,name,'Description').
struct_dt_elem_i([ 26,1,1 ],3,camelname,'Description').
struct_dt_elem_i([ 26,1,1 ],3,length,256).
struct_dt_elem_i([ 26,1,1 ],3,decimals,0).
struct_dt_elem_i([ 26,1,1 ],3,type,[ 13,256,0 ]).
struct_dt_elem_i([ 26,1,1 ],3,pic,'').
struct_dt_elem_i([ 26,1,1 ],3,collection,'False').
struct_dt_elem_i([ 26,1,1 ],3,'ExternalName','Description').
struct_dt_elem_i([ 26,1,1 ],3,'ExternalNamespace',miTienda).
struct_dt_elem_i([ 26,1,1 ],3,'XmlType','Element').
struct_dt_elem_i([ 26,1,1 ],3,'XmlName','').
struct_dt_elem_i([ 26,1,1 ],3,'XmlNamespace','').
struct_dt_elem_i([ 26,1,1 ],3,soaptype,'').
struct_dt_elem_i([ 26,1,1 ],3,'XmlInclude',idXmlIncludeAlways).
struct_dt_elem_i([ 26,1,1 ],3,'JsonName','').
struct_dt_elem_i([ 26,1,1 ],3,'JsonInclude',idJsonEmpty).
 
 
 
 
 
 
 
pgm_callprotocol_i(mnproc,2,'PAIS_DATAPROVIDER','INTERNAL','').
 
 
pgm_main_info_i(mnproc,2,'PAIS_DATAPROVIDER',[ 41,'APAIS_DATAPROVIDER','Pais_Data Provider','','','','INTERNAL' ]).
 
 
 
module_info_i('GeneXus\Common','CSHARP_NAME_SPACE','GeneXus.Core').
module_info_i('GeneXus\Common','AssemblyName','GeneXus.dll').
 
 
 
 
 
 
 
 
 
 
